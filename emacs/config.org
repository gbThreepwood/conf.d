* Software development
** Eglot
Eglot (or Emacs Polyglot) is the built in package for LSP.
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c-ts-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
  (add-hook 'c++-ts-mode-hook 'eglot-ensure)
#+end_src
** Yasnippet
YASnippet is a template system for Emacs.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+end_src
** Flycheck
Flycheck is a on-the-fly syntax chekcing tool.
It is an alternative to the built in Flymake.
#+begin_src emacs-lisp
  (use-package flycheck
  :ensure t
  :init (global-flycheck-mode))
  ;;(add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src
** LSP-mode
#+begin_src emacs-lisp
  ;; (setq package-selected-packages '(lsp-mode yasnippet lsp-treemacs helm-lsp
  ;;     projectile hydra flycheck company helm-xref dap-mode))

  ;; (when (cl-find-if-not #'package-installed-p package-selected-packages)
  ;;   (package-refresh-contents)
  ;;   (mapc #'package-install package-selected-packages))

  ;; ;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details
  ;; (helm-mode)
  ;; (require 'helm-xref)
  ;; (define-key global-map [remap find-file] #'helm-find-files)
  ;; (define-key global-map [remap execute-extended-command] #'helm-M-x)
  ;; (define-key global-map [remap switch-to-buffer] #'helm-mini)

  ;; (which-key-mode)
  ;; (add-hook 'c-mode-hook 'lsp)
  ;; (add-hook 'c++-mode-hook 'lsp)

  ;; (setq gc-cons-threshold (* 100 1024 1024)
  ;;       read-process-output-max (* 1024 1024)
  ;;       treemacs-space-between-root-nodes nil
  ;;       company-idle-delay 0.0
  ;;       company-minimum-prefix-length 1
  ;;       lsp-idle-delay 0.1)  ;; clangd is fast

  ;; (with-eval-after-load 'lsp-mode
  ;;   (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  ;;   (require 'dap-cpptools)
  ;;   (yas-global-mode))
#+end_src

** GNU Global
** Magit
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify 1)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+end_src
GNU global is a tool for source code tagging
TODO: Install and configure
* SPICE
** Spice-mode
A major mode for editing SPICE netlist files
#+begin_src emacs-lisp
  (use-package spice-mode
    :ensure t)
#+end_src
** ob-spice
org-babel function for SPICE evaluation
#+begin_src emacs-lisp
  (use-package ob-spice
    :ensure t)
#+end_src
* Terminal
** Use ansi-term, and set defult shell to zsh
#+BEGIN_SRC emacs-lisp
  (defvar def-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list def-term-shell)))
  (ad-activate 'ansi-term)

  ;;(global-set-key (kbd "<s-t>") 'ansi-term)
  (keymap-global-set "C-z" 'ansi-term)
#+END_SRC

* Org
** Basic config
When editing code blocks in org-mode (C-c ') the
code editor should open in the same window as your
current .org file. I.e. it should temporaily replace
your current window.
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Set the default directory to store notes from the org capture utility.
#+begin_src emacs-lisp
  (setq org-default-notes-file (concat org-directory "/notes.org"))
#+end_src

** Org mode templates
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp"))
#+end_src
** Org bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src

* Apperance
** Disable tool-bar, menu, etc
#+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-startup-message t)
#+END_SRC

** Disable the bell sound
#+begin_src emacs-lisp
    ;; Disable bell
    (setq ring-bell-function 'ignore)
#+end_src

** Pretty symbols
#+begin_src emacs-lisp
  ;; Replace some text by symbols, e.g. the text lambda by the symbol
  ;; from the Greek alphabet
  (when window-system (global-prettify-symbols-mode t))
#+end_src

** Line highlight
#+begin_src emacs-lisp
  ;; Highlight the line with the cursor, but not when running Emacs in a terminal
  (when window-system (global-hl-line-mode t))
#+end_src

** Additional brief line highlight
Briefly highlight the line with the cursor when you switch buffer
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src

** Single letter confirmation instead of having to type yes or no
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Backup files
#+begin_src emacs-lisp
  ;; Uncomment to disable backup file creation
  ;;(setq make-backup-file nil)
  ;;(setq auto-save-default nil)
#+end_src
** Line numbering
Show line number for both row and column in the modeline.
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+end_src
** Show the time
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+end_src
* Dashboard and project management
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Novitech Emacs"))
#+end_src

** Projectile
Use projectile for project management
#+begin_src emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1))
#+end_src
* Help tools

** Which key
Display the available key combinations which are supported after
a given key. E.g. after C-x a window will pop up which tells you
what any additional key will do.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src

* Text editing
** Encoding
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
** Subword
Treat each subword in a camel-cased word as separate words
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

** Electric
For auto-complete of stuff (e.g. parentheses)
I am not a big fan of this type of auto complete,
hence the code is commented out.
#+begin_src emacs-lisp
    ;;(setq electric-pair-pairs '( (?\( . ?\) ))
    ;;(electric-pair-mode t)
#+end_src
** Scroll line by line when moving beyond the screen border

#+begin_src emacs-lisp
  ;; Scroll line by line
  (setq scroll-conservatively 100)

#+end_src

** Kill whole word
By default Emacs does not kill a whole word, only
from cursor position to the end, or beginning of
the word.
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (keymap-global-set "C-c w w" 'kill-whole-word)
#+end_src
** Hungry delete
Delete whitespace in a hungry way. This is sometimes
useful, but comment it out if it annoys you.
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src

** Copy whole line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (keymap-global-set "C-c w l" 'copy-whole-line)
#+end_src
** Kill ring menu
The popup-kill-ring package is old and not working too well
#+begin_src emacs-lisp
  ;; (use-package popup-kill-ring
  ;;   :ensure t
  ;;   :bind ("M-y" . popup-kill-ring))
#+end_src

Open a new window with a list of all items in the
kill ring. Allows you to select which item you want
to yank.
#+begin_src emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    )
#+end_src
* IDO and Helm
** Helm
#+begin_src emacs-lisp
  (use-package helm
    :ensure t
    :bind
    ("C-x C-f" . 'helm-find-files)
    ("C-x C-b" . 'helm-buffer-list)
    ("M-x" . 'helm-M-x))
#+end_src
** Enable IDO mode
#+begin_src emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere t)
  (ido-mode 1)
#+end_src

** IDO vertical
Use Helm instead of IDO vertical
#+begin_src emacs-lisp
  ;; (use-package ido-vertical-mode
  ;;   :ensure t
  ;;   :init
  ;;   (ido-vertical-mode 1))
  ;; (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

** SMEX
SMEX - M-x enhancement built on top of Ido.
#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+end_src
** Switch buffer
#+begin_src emacs-lisp
  (keymap-global-set "C-x C-b" 'ido-switch-buffer)
#+end_src

* Buffers
** Enable ibuffer
Enable a more convenient way to browse the available buffers
#+begin_src emacs-lisp
  (keymap-global-set "C-x b" 'ibuffer)
  (setq ibuffer-expert t)
#+end_src
** Kill current buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (save-buffer)
    (kill-buffer (current-buffer)))
  (keymap-global-set "C-x k" 'kill-current-buffer)
#+end_src
** Kill all buffers
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (save-some-buffers)
    (ampc 'kill-buffer (buffer-list)))
  (keymap-global-set "C-M-s-k" 'kill-all-buffers)
#+end_src
* Avy
Allow us to quickly jump to words in a text file by using the M-s key
combination, followed by the char you want to jump to, and then typing
the highlighted chars which appears.
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

* Config edit and reload
** Edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (keymap-global-set "C-c e" 'config-visit)
#+end_src

** Reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (keymap-global-set "C-c r" 'config-reload)
#+end_src

* Colors
** Rainbow
Display hex color codes in color
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+end_src

** Rainbow delimiters
Colorize the delimiters to make them more easy to identify.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
* Windows
** Switch windows
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src

** Split window follow
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (keymap-global-set "C-x 2" 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (keymap-global-set "C-x 3" 'split-and-follow-vertically)
#+end_src

* Admin tools
** sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
#+end_src

* Auto complete
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

* Mode line
** Spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
** Diminish
#+begin_src emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'which-key-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    (diminish 'yas-minor-mode))
#+end_src

* Dmenu
#+begin_src emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("C-c d" . dmenu))
#+end_src

* Symon
System monitor package which has not been updated in some years
and did not work on my version of Emacs
#+begin_src emacs-lisp
  ;; (use-package symon
  ;;   :ensure t
  ;;   :bind
  ;;   ("C-c s" . symon-mode))
#+end_src

* EXWM
Emacs window manager.
#+begin_src emacs-lisp
  ;; (use-package exwm
  ;;   :ensure t
  ;;   :config
  ;;   (require 'exwm-config)
  ;;   (exwm-config-default))
#+end_src

* Multimedia
TODO...
