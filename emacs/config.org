#+STARTUP: overview
#+TITLE: Emacs oppsett
#+CREATOR: Eirik Haustveit
#+LANGUAGE: en
#+OPTIONS: num:nil
* Fundamental settings
It is nice to have the Emacs server running so we can open files in the
currently running Emacs session using =emacsclient=
#+begin_src emacs-lisp
(server-start)
#+end_src
* Helper functions
** package-vc-install
The new (in 2022) package-vc-install function allows us to install
packages directly from a remote repository. If a package is already
installed (as will be the case the second time you open Emacs after
adding a package using package-vc-install) it will prompt you to
Overwrite the existing package. This is annoying.
#+begin_src emacs-lisp
;; Source: https://tony-zorman.com/posts/package-vc-install.html
  (cl-defun novi/vc-install (&key (fetcher "github") repo name rev backend)
    "Install a package from a remote if it's not already installed.
  This is a thin wrapper around `package-vc-install' in order to
  make non-interactive usage more ergonomic.  Takes the following
  named arguments:

  - FETCHER the remote where to get the package (e.g., \"gitlab\").
    If omitted, this defaults to \"github\".

  - REPO should be the name of the repository (e.g.,
    \"slotThe/arXiv-citation\".

  - NAME, REV, and BACKEND are as in `package-vc-install' (which
    see)."
    (let* ((url (format "https://www.%s.com/%s" fetcher repo))
	   (iname (when name (intern name)))
	   (pac-name (or iname (intern (file-name-base repo)))))
      (unless (package-installed-p pac-name)
	(package-vc-install url iname rev backend))))
#+end_src
* Software development
** Eglot
Eglot (or Emacs Polyglot) is the built in package for LSP.
#+begin_src emacs-lisp
  (add-hook 'c-mode-hook 'eglot-ensure)
  (add-hook 'c-ts-mode-hook 'eglot-ensure)
  (add-hook 'c++-mode-hook 'eglot-ensure)
  (add-hook 'c++-ts-mode-hook 'eglot-ensure)
#+end_src
** Yasnippet
YASnippet is a template system for Emacs.
#+begin_src emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+end_src
** Flycheck
Flycheck is a on-the-fly syntax chekcing tool.
It is an alternative to the built in Flymake.
#+begin_src emacs-lisp
  ;;(use-package flycheck
  ;;:ensure t
  ;;:init (global-flycheck-mode))
  ;;(add-hook 'after-init-hook #'global-flycheck-mode)
#+end_src
** LSP-mode
#+begin_src emacs-lisp
  ;; (setq package-selected-packages '(lsp-mode yasnippet lsp-treemacs helm-lsp
  ;;     projectile hydra flycheck company helm-xref dap-mode))

  ;; (when (cl-find-if-not #'package-installed-p package-selected-packages)
  ;;   (package-refresh-contents)
  ;;   (mapc #'package-install package-selected-packages))

  ;; ;; sample `helm' configuration use https://github.com/emacs-helm/helm/ for details
  ;; (helm-mode)
  ;; (require 'helm-xref)
  ;; (define-key global-map [remap find-file] #'helm-find-files)
  ;; (define-key global-map [remap execute-extended-command] #'helm-M-x)
  ;; (define-key global-map [remap switch-to-buffer] #'helm-mini)

  ;; (which-key-mode)
  ;; (add-hook 'c-mode-hook 'lsp)
  ;; (add-hook 'c++-mode-hook 'lsp)

  ;; (setq gc-cons-threshold (* 100 1024 1024)
  ;;       read-process-output-max (* 1024 1024)
  ;;       treemacs-space-between-root-nodes nil
  ;;       company-idle-delay 0.0
  ;;       company-minimum-prefix-length 1
  ;;       lsp-idle-delay 0.1)  ;; clangd is fast

  ;; (with-eval-after-load 'lsp-mode
  ;;   (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  ;;   (require 'dap-cpptools)
  ;;   (yas-global-mode))
#+end_src
** Magit
Magit is a tool for managing Git repositories.
#+begin_src emacs-lisp
  (use-package magit
    :ensure t
    :config
    (setq magit-push-always-verify 1)
    (setq git-commit-summary-max-length 50)
    :bind
    ("M-g" . magit-status))
#+end_src
** GNU Global
GNU global is a tool for source code tagging
TODO: Install and configure
** Kmonad
Kmonad is a tool to extend the functionallity of your keyboard
it is not an Emacs plugin, but here we add support for syntax
highlighting the configuration files.
#+begin_src emacs-lisp
;;  (package-vc-install
;;   '(kbd-mode . (:url "https://github.com/kmonad/kbd-mode")))
  (use-package kbd-mode
  :init (novi/vc-install :fetcher "github" :repo "kmonad/kbd-mode")
  )
#+end_src
** PlatformIO
#+begin_src emacs-lisp
    (use-package platformio-mode
    :ensure t
    )
  
  (require 'platformio-mode)
  ;; Enable ccls for all c++ files, and platformio-mode only
  ;; when needed (platformio.ini present in project root).
  (add-hook 'c++-mode-hook (lambda ()
                             (lsp-deferred)
                             (platformio-conditionally-enable)))
#+end_src
* SPICE
** Spice-mode
A major mode for editing SPICE netlist files
#+begin_src emacs-lisp
  (use-package spice-mode
    :ensure t)
#+end_src
** ob-spice
org-babel function for SPICE evaluation
#+begin_src emacs-lisp
  (use-package ob-spice
    :ensure t)
#+end_src
* Terminal
** Use ansi-term, and set defult shell to zsh
#+BEGIN_SRC emacs-lisp
  (defvar def-term-shell "/usr/bin/zsh")
  (defadvice ansi-term (before force-bash)
    (interactive (list def-term-shell)))
  (ad-activate 'ansi-term)

  ;;(global-set-key (kbd "<s-t>") 'ansi-term)
  (keymap-global-set "C-z" 'ansi-term)
#+END_SRC
* LaTeX
** AUCTeX
Is a part of Emacs.
#+begin_src emacs-lisp
  (setq TeX-auto-save t)
  (setq TeX-parse-self t)
  (setq-default TeX-master nil)

  ;; auto-fill-mode
  (add-hook 'LaTeX-mode-hook 'visual-line-mode)
  (add-hook 'LaTeX-mode-hook 'flyspell-mode)
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (setq reftex-plug-into-AUCTeX t)

  (setq TeX-PDF-mode t)
#+end_src
** RefTeX
Is a part of Emacs. We want it enabled automatically for all LaTeX files.
It is a package for support of labels, references, citations, and indices.
#+begin_src emacs-lisp
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)   ; with AUCTeX LaTeX mode
(add-hook 'latex-mode-hook 'turn-on-reftex)   ; with Emacs latex mode
#+end_src
** Citar
Citar is used to browse and act on BibTeX, BibLaTeX, and CSL JSON bibliographic data.
#+begin_src emacs-lisp
  (use-package citar
    :ensure t
    :custom
    (citar-bibliography '("~/bib/references.bib"))
    :hook
    (LaTeX-mode . citar-capf-setup)
    (org-mode . citar-capf-setup))
#+end_src
* Org-mode
** Basic config
When editing code blocks in org-mode (C-c ') the
code editor should open in the same window as your
current .org file. I.e. it should temporaily replace
your current window.
#+begin_src emacs-lisp
  (setq org-src-window-setup 'current-window)
#+end_src

Various configuration.
#+begin_src emacs-lisp
    ;; Set the directory to hold the agenda files. All files in folder should be included in agenda this way.
    (setq org-agenda-files '("~/org"))

    ;;Set the default directory to store notes from the org capture utility.
    (setq org-default-notes-file (concat org-directory "/notes.org"))

    ;; When a TODO is set to a done state, record a timestamp
    (setq org-log-done 'time)

    ;; Follow the links
    (setq org-return-follows-link  t)

    ;; Associate all org files with org mode
    (add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))

    ;; Make the indentation look nicer
    (add-hook 'org-mode-hook 'org-indent-mode)

    ;; Hide the markers so you just see bold text as BOLD-TEXT and not *BOLD-TEXT*
    (setq org-hide-emphasis-markers t)

    ;; Wrap the lines in org mode so that things are easier to read
    (add-hook 'org-mode-hook 'visual-line-mode)

    ;; TODO states
    (setq org-todo-keywords
	'((sequence "TODO(t)" "PLANNING(p)" "IN-PROGRESS(i@/!)" "VERIFYING(v!)" "BLOCKED(b@)"  "|" "DONE(d!)" "OVERCOME(o@!)" "WONT-DO(w@/!)" )
	  ))
  
  ;; TODO colors
  (setq org-todo-keyword-faces
	'(
	  ("TODO" . (:foreground "GoldenRod" :weight bold))
	  ("PLANNING" . (:foreground "DeepPink" :weight bold))
	  ("IN-PROGRESS" . (:foreground "Cyan" :weight bold))
	  ("VERIFYING" . (:foreground "DarkOrange" :weight bold))
	  ("BLOCKED" . (:foreground "Red" :weight bold))
	  ("DONE" . (:foreground "LimeGreen" :weight bold))
	  ("OVERCOME" . (:foreground "LimeGreen" :weight bold))
	  ("WONT-DO" . (:foreground "LimeGreen" :weight bold))
	  ))
  
#+end_src
** Shortcuts
#+begin_src emacs-lisp
;; Shortcuts for storing links, viewing the agenda, and starting a capture
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map "\C-ca" 'org-agenda)
(define-key global-map "\C-cc" 'org-capture)
#+end_src
** Capture templates
#+begin_src emacs-lisp
  (setq org-capture-templates
	'(    
	  ("j" "Work Log Entry"
	   entry (file+datetree "~/org/work-log.org")
	   "* %?"
	   :empty-lines 0)

	  ("n" "Generic note"
	 entry (file+headline "~/org/notes.org" "Random Notes")
	 "** %?"
	 :empty-lines 0)

	  ("p" "Passwords and such"
	   entry (file+headline "~/org/notes.org" "Passwrods and such")
	   "** %?"
	   :empty-lines 0)

	  ("g" "General To-Do"
	   entry (file+headline "~/org/todo.org" "General tasks")
	   "* TODO [#B] %?\n:Created: %T\n "
	   :empty-lines 0)

	  ("c" "Code To-Do"
	 entry (file+headline "~/org/todo.org" "Code Related Tasks")
	 "* TODO [#B] %?\n:Created: %T\n%i\n%a\nProposed Solution: "
	 :empty-lines 0)

        ("m" "Meeting"
         entry (file+datetree "~/org/meetings.org")
         "* %? :meeting:%^g \n:Created: %T\n** Attendees\n*** \n** Notes\n** Action Items\n*** TODO [#A] "
         :tree-type week
         :clock-in t
         :clock-resume t
         :empty-lines 0)
	  
	))
#+end_src
** Tags
#+begin_src emacs-lisp
  ;; Tags
  (setq org-tag-alist '(
			;; Ticket types
			(:startgroup . nil)
			("@bug" . ?b)
			("@feature" . ?u)
			("@spike" . ?j)                      
			(:endgroup . nil)

			;; Ticket flags
			("@write_future_ticket" . ?w)
			("@emergency" . ?e)
			("@research" . ?r)

			;; Meeting types
			(:startgroup . nil)
			("big_sprint_review" . ?i)
			("cents_sprint_retro" . ?n)
			("dsu" . ?d)
			("grooming" . ?g)
			("sprint_retro" . ?s)
			(:endgroup . nil)

			;; Code TODOs tags
			("QA" . ?q)
			("backend" . ?k)
			("broken_code" . ?c)
			("frontend" . ?f)

			;; Special tags
			("CRITICAL" . ?x)
			("obstacle" . ?o)

			;; Meeting tags
			("HR" . ?h)
			("general" . ?l)
			("meeting" . ?m)
			("misc" . ?z)
			("planning" . ?p)

			;; Work Log Tags
			("accomplishment" . ?a)
			))

;; Tag colors
(setq org-tag-faces
      '(
        ("planning"  . (:foreground "mediumPurple1" :weight bold))
        ("backend"   . (:foreground "royalblue1"    :weight bold))
        ("frontend"  . (:foreground "forest green"  :weight bold))
        ("QA"        . (:foreground "sienna"        :weight bold))
        ("meeting"   . (:foreground "yellow1"       :weight bold))
        ("CRITICAL"  . (:foreground "red1"          :weight bold))
        )
      )
#+end_src
** Org mode templates
#+begin_src emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" . "src emacs-lisp"))
#+end_src
** Org bullets
#+begin_src emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+end_src
** Export
Syntax higlight in org-mode documents which are exported to HTML.
#+begin_src emacs-lisp
(use-package htmlize
  :ensure t)
#+end_src
Settings for Org-mode
* Searcing
** Swiper
#+begin_src emacs-lisp
  (use-package swiper
  :ensure t
  :bind ("C-s" . swiper))
#+end_src
* Apperance
** Disable tool-bar, menu, etc
#+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
    (menu-bar-mode -1)
    (scroll-bar-mode -1)
    (setq inhibit-startup-message t)
#+END_SRC

** Disable the bell sound
#+begin_src emacs-lisp
    ;; Disable bell
    (setq ring-bell-function 'ignore)
#+end_src

** Pretty symbols
#+begin_src emacs-lisp
  ;; Replace some text by symbols, e.g. the text lambda by the symbol
  ;; from the Greek alphabet
  (when window-system (global-prettify-symbols-mode t))
#+end_src

** Line highlight
#+begin_src emacs-lisp
  ;; Highlight the line with the cursor, but not when running Emacs in a terminal
  (when window-system (global-hl-line-mode t))
#+end_src

** Additional brief line highlight
Briefly highlight the line with the cursor when you switch buffer
#+begin_src emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+end_src

** Single letter confirmation instead of having to type yes or no
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

** Backup files
#+begin_src emacs-lisp
  ;; Uncomment to disable backup file creation
  ;;(setq make-backup-file nil)
  ;;(setq auto-save-default nil)
#+end_src
** Line numbering
Show line number for both row and column in the modeline.
#+begin_src emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
;;display-line-numbers-mode 1)
#+end_src

Show line numbers to the right when in programming mode

#+begin_src emacs-lisp
  ;; (use-package linum-relative
  ;;   :ensure t
  ;;   :config
  ;;   (setq linum-relative-current-symbol "")
  ;;   (add-hook 'prog-mode-hook 'linum-relative-mode))
#+end_src
** Show the time
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+end_src
** Scrollbar
Sublimity scroll did not work too well...
is there something wrong with the config?
#+begin_src emacs-lisp
;;  (use-package sublimity
;;    :ensure t)
    ;;:config
    ;;(use-package sublimity-scroll
    ;;  :ensure t))
;;  (require 'sublimity-scroll)
;;  (require 'sublimity-map)
;;  (sublimity-mode 1)
#+end_src
* Dashboard and project management
#+begin_src emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10)))
    (setq dashboard-banner-logo-title "Novitech Emacs"))
#+end_src

** Projectile
Use projectile for project management
#+begin_src emacs-lisp
      (use-package projectile
        :ensure t
        :init
        (projectile-mode 1))

  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
  
#+end_src

** Cmake project management
#+begin_src emacs-lisp

#+end_src

** Treemacs
#+begin_src emacs-lisp
  (use-package treemacs
    :ensure t
    :defer t
    :init
    (with-eval-after-load 'winum
      (define-key winum-keymap (kbd "M-0") #'treemacs-select-window))
    :config
    (progn
      (setq treemacs-collapse-dirs                   (if treemacs-python-executable 3 0)
	    treemacs-deferred-git-apply-delay        0.5
	    treemacs-directory-name-transformer      #'identity
	    treemacs-display-in-side-window          t
	    treemacs-eldoc-display                   'simple
	    treemacs-file-event-delay                2000
	    treemacs-file-extension-regex            treemacs-last-period-regex-value
	    treemacs-file-follow-delay               0.2
	    treemacs-file-name-transformer           #'identity
	    treemacs-follow-after-init               t
	    treemacs-expand-after-init               t
	    treemacs-find-workspace-method           'find-for-file-or-pick-first
	    treemacs-git-command-pipe                ""
	    treemacs-goto-tag-strategy               'refetch-index
	    treemacs-header-scroll-indicators        '(nil . "^^^^^^")
	    treemacs-hide-dot-git-directory          t
	    treemacs-indentation                     2
	    treemacs-indentation-string              " "
	    treemacs-is-never-other-window           nil
	    treemacs-max-git-entries                 5000
	    treemacs-missing-project-action          'ask
	    treemacs-move-forward-on-expand          nil
	    treemacs-no-png-images                   nil
	    treemacs-no-delete-other-windows         t
	    treemacs-project-follow-cleanup          nil
	    treemacs-persist-file                    (expand-file-name ".cache/treemacs-persist" user-emacs-directory)
	    treemacs-position                        'left
	    treemacs-read-string-input               'from-child-frame
	    treemacs-recenter-distance               0.1
	    treemacs-recenter-after-file-follow      nil
	    treemacs-recenter-after-tag-follow       nil
	    treemacs-recenter-after-project-jump     'always
	    treemacs-recenter-after-project-expand   'on-distance
	    treemacs-litter-directories              '("/node_modules" "/.venv" "/.cask")
	    treemacs-project-follow-into-home        nil
	    treemacs-show-cursor                     nil
	    treemacs-show-hidden-files               t
	    treemacs-silent-filewatch                nil
	    treemacs-silent-refresh                  nil
	    treemacs-sorting                         'alphabetic-asc
	    treemacs-select-when-already-in-treemacs 'move-back
	    treemacs-space-between-root-nodes        t
	    treemacs-tag-follow-cleanup              t
	    treemacs-tag-follow-delay                1.5
	    treemacs-text-scale                      nil
	    treemacs-user-mode-line-format           nil
	    treemacs-user-header-line-format         nil
	    treemacs-wide-toggle-width               70
	    treemacs-width                           35
	    treemacs-width-increment                 1
	    treemacs-width-is-initially-locked       t
	    treemacs-workspace-switch-cleanup        nil)

      ;; The default width and height of the icons is 22 pixels. If you are
      ;; using a Hi-DPI display, uncomment this to double the icon size.
      ;;(treemacs-resize-icons 44)

      (treemacs-follow-mode t)
      (treemacs-filewatch-mode t)
      (treemacs-fringe-indicator-mode 'always)
      (when treemacs-python-executable
	(treemacs-git-commit-diff-mode t))

      (pcase (cons (not (null (executable-find "git")))
		   (not (null treemacs-python-executable)))
	(`(t . t)
	 (treemacs-git-mode 'deferred))
	(`(t . _)
	 (treemacs-git-mode 'simple)))

      (treemacs-hide-gitignored-files-mode nil))
    :bind
    (:map global-map
	  ("M-0"       . treemacs-select-window)
	  ("C-x t 1"   . treemacs-delete-other-windows)
	  ("C-x t t"   . treemacs)
	  ("C-x t d"   . treemacs-select-directory)
	  ("C-x t B"   . treemacs-bookmark)
	  ("C-x t C-t" . treemacs-find-file)
	  ("C-x t M-t" . treemacs-find-tag)))

  ;(use-package treemacs-evil
  ;  :after (treemacs evil)
  ;  :ensure t)

  (use-package treemacs-projectile
    :after (treemacs projectile)
    :ensure t)

  (use-package treemacs-icons-dired
    :hook (dired-mode . treemacs-icons-dired-enable-once)
    :ensure t)

  (use-package treemacs-magit
    :after (treemacs magit)
    :ensure t)

  (use-package treemacs-persp ;;treemacs-perspective if you use perspective.el vs. persp-mode
    :after (treemacs persp-mode) ;;or perspective vs. persp-mode
    :ensure t
    :config (treemacs-set-scope-type 'Perspectives))

  (use-package treemacs-tab-bar ;;treemacs-tab-bar if you use tab-bar-mode
    :after (treemacs)
    :ensure t
    :config (treemacs-set-scope-type 'Tabs))
#+end_src
* Help tools
** Which key
Display the available key combinations which are supported after
a given key. E.g. after C-x a window will pop up which tells you
what any additional key will do.
#+begin_src emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+end_src
* Text editing
** Encoding
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+end_src
** Subword
Treat each subword in a camel-cased word as separate words
#+begin_src emacs-lisp
  (global-subword-mode 1)
#+end_src

** Electric
For auto-complete of stuff (e.g. parentheses)
I am not a big fan of this type of auto complete,
hence the code is commented out.
#+begin_src emacs-lisp
    ;;(setq electric-pair-pairs '( (?\( . ?\) ))
    ;;(electric-pair-mode t)
#+end_src
** Scroll line by line when moving beyond the screen border

#+begin_src emacs-lisp
  ;; Scroll line by line
  (setq scroll-conservatively 100)

#+end_src

** Kill whole word
By default Emacs does not kill a whole word, only
from cursor position to the end, or beginning of
the word.
#+begin_src emacs-lisp
  (defun kill-whole-word ()
    (interactive)
    (forward-char 1)
    (backward-word)
    (kill-word 1))
  (keymap-global-set "C-c w w" 'kill-whole-word)
#+end_src
** Hungry delete
Delete whitespace in a hungry way. This is sometimes
useful, but comment it out if it annoys you.
#+begin_src emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+end_src

** Copy whole line
#+begin_src emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (keymap-global-set "C-c w l" 'copy-whole-line)
#+end_src
** Kill ring menu
The popup-kill-ring package is old and not working too well
#+begin_src emacs-lisp
  ;; (use-package popup-kill-ring
  ;;   :ensure t
  ;;   :bind ("M-y" . popup-kill-ring))
#+end_src

Open a new window with a list of all items in the
kill ring. Allows you to select which item you want
to yank.
#+begin_src emacs-lisp
  (use-package browse-kill-ring
    :ensure t
    )
#+end_src

** Multiple cursors
mark-multiple is no longer maintained, use multiple-cursors instead.
Allows you to mark multiple occurances of the same text.
#+begin_src emacs-lisp
  (use-package multiple-cursors
  :ensure t
  :bind (("H-SPC" . set-rectangular-region-anchor)
	 ("C-M-SPC" . set-rectangular-region-anchor)
	 ("C->" . mc/mark-next-like-this)
	 ("C-<" . mc/mark-previous-like-this)
	 ("C-c C->" . mc/mark-all-like-this)
	 ("C-c C-SPC" . mc/edit-lines)
	 ))

;;  (keymap-global-set "C-S-c C-S-c" 'mc/edit-lines)
#+end_src
** Expand region
Allow you to quickly expand the region of selected text.
#+begin_src emacs-lisp
  (use-package expand-region
  :ensure t
  :bind ("C-q" . er/expand-region))
#+end_src
* IDO and Helm
** Helm
#+begin_src emacs-lisp
  (use-package helm
	      :ensure t
	      :bind
	      ("C-x C-f" . 'helm-find-files)
	      ("C-x C-b" . 'helm-buffer-list)
	      ("M-x" . 'helm-M-x)
      :config
	(setq helm-autoresize-max-height 0
	    helm-autoresize-min-height 40
	    helm-M-x-fuzzy-match t
	    helm-buffers-fuzzy-matching t
	    helm-recentf-fuzzy-match t
	    helm-semantic-fuzzy-match t
	    helm-imenu-fuzzy-match t
	    helm-split-window-in-side-p nil
	    helm-move-to-line-cycle-in-source nil
	    helm-ff-search-library-in-sexp t
	    helm-scroll-amount 8 
	    helm-echo-input-in-header-line t)
      :init
      (helm-mode 1))
#+end_src
** Enable IDO mode
Use Helm instead of IDO
#+begin_src emacs-lisp
  ;; (setq ido-enable-flex-matching nil)
  ;; (setq ido-create-new-buffer 'always)
  ;; (setq ido-everywhere t)
  ;; (ido-mode 1)
#+end_src

** IDO vertical
Use Helm instead of IDO vertical
#+begin_src emacs-lisp
  ;; (use-package ido-vertical-mode
  ;;   :ensure t
  ;;   :init
  ;;   (ido-vertical-mode 1))
  ;; (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+end_src

** SMEX
SMEX - M-x enhancement built on top of Ido.
#+begin_src emacs-lisp
  ;; (use-package smex
  ;;   :ensure t
  ;;   :init (smex-initialize)
  ;;   :bind
  ;;   ("M-x" . smex))
#+end_src
** Switch buffer
#+begin_src emacs-lisp
  ;;(keymap-global-set "C-x C-b" 'ido-switch-buffer)
#+end_src

* Buffers
** Enable ibuffer
Enable a more convenient way to browse the available buffers
Commented since we use Helm instead.
#+begin_src emacs-lisp
;;  (keymap-global-set "C-x b" 'ibuffer)
;;  (setq ibuffer-expert t)
#+end_src
** Kill current buffer
#+begin_src emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (save-buffer)
    (kill-buffer (current-buffer)))
  (keymap-global-set "C-x k" 'kill-current-buffer)
#+end_src
** Kill all buffers
#+begin_src emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (save-some-buffers)
    (ampc 'kill-buffer (buffer-list)))
  (keymap-global-set "C-M-s-k" 'kill-all-buffers)
#+end_src
* Avy
Allow us to quickly jump to words in a text file by using the M-s key
combination, followed by the char you want to jump to, and then typing
the highlighted chars which appears.
#+begin_src emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+end_src

* Config edit and reload
** Edit
#+begin_src emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (keymap-global-set "C-c e" 'config-visit)
#+end_src

** Reload
#+begin_src emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (keymap-global-set "C-c r" 'config-reload)
#+end_src

* Colors
** Rainbow
Display hex color codes in color
#+begin_src emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :hook prog-mode)
    ;;:init (add-hook 'prog-mode-hook 'rainbow-mode))
#+end_src

** Rainbow delimiters
Colorize the delimiters to make them more easy to identify.
#+begin_src emacs-lisp
    (use-package rainbow-delimiters
      :ensure t
      :init
      (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+end_src
* Windows
** Switch windows
#+begin_src emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l"))
    :bind
    ([remap other-window] . switch-window))
#+end_src

** Split window follow
#+begin_src emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (keymap-global-set "C-x 2" 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (keymap-global-set "C-x 3" 'split-and-follow-vertically)
#+end_src

* Admin tools
** sudo edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("C-c s" . sudo-edit))
#+end_src

* Auto complete
#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+end_src

* Mode line
** Spaceline
#+begin_src emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme))
#+end_src
** Diminish
#+begin_src emacs-lisp
      (use-package diminish
	:ensure t
	:init
	(diminish 'hungry-delete-mode)
	(diminish 'beacon-mode)
	(diminish 'which-key-mode)
	(diminish 'subword-mode)
	(diminish 'rainbow-mode)
	(diminish 'yas-minor-mode)
	(diminish 'flycheck-mode)
	(diminish 'eldoc-mode))
#+end_src
* Symon
System monitor package which has not been updated in some years
and did not work on my version of Emacs
#+begin_src emacs-lisp
  ;; (use-package symon
  ;;   :ensure t
  ;;   :bind
  ;;   ("C-c s" . symon-mode))
#+end_src

* Emax as window manager with EXWM
Emacs window manager.
#+begin_src emacs-lisp
  ;; (use-package exwm
  ;;   :ensure t
  ;;   :config
  ;;   (require 'exwm-config)
  ;;   (exwm-config-default))
#+end_src
** Dmenu
#+begin_src emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("C-c d" . dmenu))
#+end_src

* Multimedia
TODO...
